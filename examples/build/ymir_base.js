// --- GENERATED BY YMIR ---

// needed validation functions
const isInt = (str) => {
    const v = parseInt(str);
    return !isNaN(v) && isFinite(v);
};
const isFloat = (str) => {
    const v = parseFloat(str);
    return !isNaN(v) && isFinite(v);
};
const isBoolean = (str) => {
    return str === "true" || str === "false";
};
const isDate = (str) => {
    return !isNaN(Date.parse(str));
};
const isDatetime = isDate;
const isTime = isDate;
const isString = (str) => true;

const errorMessage = {
    _400: "Bad Request: Field {field} of type {type} is required",
    _401: "Unauthorized: You are not authorized to access this resource",
    _403: "Forbidden: You are not allowed to access this resource",
    _404: "Not Found: The requested resource could not be found",
    _500: "Internal Server Error: An internal server error occurred",
    _501: "Not Implemented: The requested method is not implemented",
    Started: "Server started on port {port}...",
};

const express = require("express");
const app = express();

require("dotenv").config();
app.use(require("cors")({origin: process.env.ALLOWED_ORIGIN}));

class YmirRestBase {
    
    async onApiRouterHelloRoute(req, res) {
        if (req.query === undefined) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "query").replace("{type}", "object"));
        }
    
        const query = req.query;
        if (query.name === undefined) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "query.name").replace("{type}", "string"));
        }
        if (!isString(query.name)) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "query.name").replace("{type}", "string"));
        }
    
        // TODO: Implement handler for route "/hello"
        res.status(501).send(errorMessage._501);
    }
    
    async onApiRouterCreatePerson(req, res) {
        if (req.body === undefined) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "body").replace("{type}", "object"));
        }
    
        const body = req.body;
        if (body["name"] === undefined) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "body.name").replace("{type}", "string"));
        }
        if (!isString(body["name"])) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "body.name").replace("{type}", "string"));
        }
    
        if (body["age"] === undefined) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "body.age").replace("{type}", "int"));
        }
        if (!isInt(body["age"])) {
            res.status(400);
            throw new Error(errorMessage._400.replace("{field}", "body.age").replace("{type}", "int"));
        }
    
        // TODO: Implement handler for route "/person"
        res.status(501).send(errorMessage._501);
    }
    
    async onApiRouterHelloRouteAnotherFile(req, res) {
        // TODO: Implement handler for route "/hello-from-another-file"
        res.status(501).send(errorMessage._501);
    }

    build(app) {
        // Routers
        const apiRouter = express.Router();
        apiRouter.use((req, res, next) => {
            try {
                if (req.headers === undefined) {
                    res.status(400);
                    throw new Error(errorMessage._400.replace("{field}", "header").replace("{type}", "object"));
                }
            
                const header = req.headers;
                if (header["X-API-Key"] === undefined) {
                    res.status(400);
                    throw new Error(errorMessage._400.replace("{field}", "header.X-API-Key").replace("{type}", "string"));
                }
                if (!isString(header["X-API-Key"])) {
                    res.status(400);
                    throw new Error(errorMessage._400.replace("{field}", "header.X-API-Key").replace("{type}", "string"));
                }
            
                next();
            } catch (e) {
                next(e);
            }
        });
        app.use(apiRouter);
        // Routes
        apiRouter.get("/hello", this.onApiRouterHelloRoute.bind(this));
        apiRouter.post("/person", this.onApiRouterCreatePerson.bind(this));
        apiRouter.get("/hello-from-another-file", this.onApiRouterHelloRouteAnotherFile.bind(this));
        app.use((err, req, res, next) => {
            if (err && (res.statusCode === 400)) {
                res.send(err.message);
            } else if (err) {
                res.status(500).send(errorMessage._500);
            } else {
                res.status(404).send(errorMessage._404);
            }
        });
    }
}

const startServer = (runtime) => {
    const ymir = new runtime();
    ymir.build(app);
    app.listen(process.env.PORT || 3000, () => {
        console.log(errorMessage.Started.replace("{port}", process.env.PORT || 3000));
    });
};

module.exports = {startServer, errorMessage, YmirRestBase};